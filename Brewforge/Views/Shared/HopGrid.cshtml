@{
    ViewBag.Title = "BeerNet Brew Forge";
}
@using Beernet_Lib.Models;
@using Brewforge.Models;
@model HopEditorViewModel

@using (Html.BeginForm("editRecipe", "Recipe", FormMethod.Get, new { returnModel = Model }))
{
    <div id="hopWidgetWrapper" class="grid grid-pad widgetItem recipeEditorWidget">
        <div class="col-1-2">
            <div id="hopListSelector" class="module selectorWidget">
                @{int index2 = 0;
                    foreach (hopAddition ha in Model.allHops)
                    {
                        string name = "h" + index2;
                        <div id=@name class="hopListItem grid" onclick="changeSelectedHop(this)">
                            <div class="col-1-4">
                                <div>@ha.hop.name</div>
                                <div class="ingredientUnit">name</div>
                            </div>
                            <div class="col-1-4 ingredientUnitParent">
                                <div>@ha.hop.aau</div>
                                <div class="ingredientUnit">aau</div>
                                </div>
                            <div class="col-1-4 ingredientUnitParent">
                                <div>@ha.amount</div>
                                <div class="ingredientUnit">oz</div>
                                </div>
                            <div class="col-1-4 ingredientUnitParent">
                                <div>@ha.time</div>
                                <div class="ingredientUnit"> @(ha.type == "Dry Hop" ? "days" : "min")</div>
                            </div>
                        </div>
                        index2++;
                    }
                }
            </div>
        </div>
        <div class="col-1-2">
            <div class="module grid">
                <div class="col-1-2">
                    <button type="button" onclick="addHop(this)">Add Hop</button>
                </div>
                <div class="col-1-2">
                    <button type="button" onclick="deleteHop(this)">Delete Hop</button>
                </div>
            </div>
            <div class="module editorWidget">
                <div style="display:none">
                    @Html.TextBoxFor(m => m.selectedHopAddition.hopID)
                    @Html.EditorFor(m => m.selectedHopAddition.hop)
                    @Html.TextBoxFor(m => m.selectedHopAddition.type, new { id = "HopTypeHidden" })
                    @Html.TextBoxFor(m => m.selectedHopAddition.additionGuid);
                </div>
                <h4 style="padding-top:0;">Edit Hop</h4>
                <div class="editorListItem infogrid">
                    <div class="col-1-4">
                        <label>Hop: </label>
                    </div>
                    <div class="col-3-4">
                        <select id="HopSelector" class="ingredientSelector" style="width:100%;">
                            @{int i = 0;
                                @foreach (hopbase h in Model.hopOptions)
                                {
                                    <option value="@h.name">@h.name</option>
                                    i++;
                                }
                            }
                        </select>
                    </div>
                </div>
                <div class="editorListItem infogrid">
                    <div class="col-1-4">
                        <label>AAU: </label>
                    </div>
                    <div class="col-3-4">
                        <label>@Model.selectedHopAddition.hop.aau</label>
                    </div>
                </div>
                <div class="editorListItem infogrid">
                    <div class="col-1-4">
                        <label>amount</label>
                    </div>
                    <div class="col-3-4">
                        @Html.TextBoxFor(m => m.selectedHopAddition.amount, new { id = "tbHopAmount", @class = "widgetControlTextbox" })

                    </div>
                </div>
                <div class="editorListItem infogrid">
                    <div class="col-1-4">
                        <label>Type</label>
                    </div>
                    <div class="col-3-4">

                        <select id="HopTypeSelector" class="ingredientSelector" style="width:100%;" onchange="">
                            <option value="Boil">Boil</option>
                            <option value="Whirlpool">Whirlpool</option>
                            <option value="Dry Hop">Dry Hop</option>
                        </select>

                    </div>
                </div>
                <div class="editorListItem infogrid">
                    <div class="col-1-4">
                        <label>time</label>
                    </div>
                    <div class="col-3-4">
                        @Html.TextBoxFor(m => m.selectedHopAddition.time, new { id = "tbHopTime", @class = "widgetControlTextbox" })
                    </div>
                </div>
                <input type="submit" value="Save" />
            </div>
        </div>
    </div>
                                }
    @section scripts {
        <script>

            //$('#HopTypeSelector').on('select2:select', function (e) {
            //    $('#HopTypeHidden').val(e.target.value);
            //});
            //
            //$('#HopSelector').on('select2:select', function (e) {
            //    //ajaxThing(e.target.selectedIndex);
            //    window.location = '/Home/testThing?updatedHop=' + e.target.selectedIndex;
            //});
            function ajaxThing(el) {
                var hop = { "name": "Centennial", "aau": "14.1" };
                var hopIndex = el;
                $.ajax({
                    url: '/Home/ajaxthingtest',
                    type: 'POST',
                    contentType: 'application/json; charset=utf-8',
                    data: JSON.stringify(hopIndex)
                }).done(function (result) {
                    $('#idontknow').load(result);
                    console.log(result);
                });
            }

            function resetRecipeAndRefresh(recipe) {

            }
        </script>
    }