@using Craftly.Beer_Blazor.ComponentClasses;
@using Beernet_Lib.Models;
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@using Craftly.Beer_Blazor.ComponentClasses.ComponentStateClasses;
@inject ProtectedSessionStorage ProtectedSessionStore
@page "/"
@{
    if (!String.IsNullOrEmpty(state))
    {
        <MainNav refreshParent=@refreshToHome logout=@refreshAndLogout openNewRecipe=@openNewRecipe/>
    }
}
<div class="container-fluid body-content">
    <div class="bodywrapper">
        @{
            if (!String.IsNullOrEmpty(state))
            {
                if (recipes == null)
                {

                    <p><em>Loading...</em></p>
                }
                else
                {
                    if (String.IsNullOrEmpty(selectedRecipeID))
                    {
                        <Craftly.Beer_Blazor.Shared.EditorWidgets.RecipeSelectorWidget Model=@Model recipes=@recipes refreshParentRecipe=@refreshRecipe openNewRecipe=@openNewRecipe> </Craftly.Beer_Blazor.Shared.EditorWidgets.RecipeSelectorWidget>
                    }
                    else
                    {
                        <Craftly.Beer_Blazor.Shared.RecipeEditor Model=@Model state=@state editorState=@es> </Craftly.Beer_Blazor.Shared.RecipeEditor>
                    }
                }
            }
            else
            {
                <Craftly.Beer_Blazor.Pages.Login refreshParent=@refresh> </Craftly.Beer_Blazor.Pages.Login>
            }


        }
    </div>

</div>
@code
{
    public string state;

    public string selectedRecipeID;
    public EditorState es { get; set; }

    public recipe Model = RecipeHelper.initializeBlankRecipe();
    public List<recipe> recipes = new List<recipe>();

    protected override async Task OnInitializedAsync()
    {
        es = generateNewEditorState();
    }

    protected override async void OnAfterRender(bool firstRender)
    {
        state = await getSessionID();
        //var session = state;
        //if (session != null)
        //{
        //    isLoggedIn = true;
        //    //recipes = await RecipeHelper.GetRecipes(session);
        //}
        if(firstRender)
        {
            refresh();
        }
    }

    public async void refresh()
    {
        state = await getSessionID();
        if (RecipeHelper.isLoggedIn(state))
        {
            recipes = await RecipeHelper.GetRecipes(state);
        }
        StateHasChanged();
    }

    public async void refreshToHome()
    {
        selectedRecipeID = "";
        refresh();
    }

    public async void refreshAndLogout()
    {
        //state = await getSessionID();
        RecipeHelper.Logout(state);
        state = null;
        selectedRecipeID = "";
        ProtectedSessionStore.DeleteAsync("session");
        StateHasChanged();
    }

    public async void refreshRecipe(string selectedRecipe)
    {
        //state = await getSessionID();
        selectedRecipeID = selectedRecipe;
        Model = RecipeHelper.GetRecipeDetails(selectedRecipe, state);
        StateHasChanged();
    }

    public async void openNewRecipe()
    {
        selectedRecipeID = "-1";
        es = generateNewEditorState();
        Model = RecipeHelper.initializeBlankRecipe();
        refresh();
    }

    async void saveSessionState(string session)
    {
        await ProtectedSessionStore.SetAsync("session", session);
    }

    ValueTask<string> getSessionID()
    {
        string session = "";
        return ProtectedSessionStore.GetAsync<string>("session");
    }

    EditorState generateNewEditorState()
    {
        EditorState e = new EditorState();
        HopState h = new HopState();
        FermentableState f = new FermentableState();
        YeastState y = new YeastState();
        AdjunctState a = new AdjunctState();

        h.currentSelectedHopID = "";
        h.currentSelectedHopIndex = 0;

        f.currentSelectedFermentableID = "";
        f.currentSelectedFermentableIndex = 0;

        y.currentSelectedYeastID = "";
        y.currentSelectedYeastIndex = 0;

        a.currentSelectedAdjunctID = "";
        a.currentSelectedAdjunctIndex = 0;

        e.hopstate = h;
        e.fermentableState = f;
        e.yeastState = y;
        e.adjunctState = a;

        return e;
    }

    //async void getSessionState()
    //{
    //    string session = null;
    //    try
    //    {
    //        state = await ProtectedSessionStore.GetAsync<string>("session");
    //        if(state != null)
    //        {
    //            isLoggedIn = true;
    //        }
    //        else
    //        {
    //            state = "";
    //            isLoggedIn = false;
    //        }
    //    }
    //    catch(Exception e)
    //    {

    //    }
    //}
}
