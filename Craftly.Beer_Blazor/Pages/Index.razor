@using Craftly.Beer_Blazor.ComponentClasses;
@using Beernet_Lib.Models;
@using Microsoft.AspNetCore.ProtectedBrowserStorage
@inject ProtectedSessionStorage ProtectedSessionStore
@page "/"
@{
    if (isLoggedIn)
    {
        <MainNav refreshParent=@refresh />
    }
}
<div class="container-fluid body-content">
    <div class="bodywrapper">
        @{
            if (isLoggedIn)
            {
                if (recipes == null)
                {

                    <p><em>Loading...</em></p>
                }
                else
                {
                    <Craftly.Beer_Blazor.Shared.EditorWidgets.RecipeSelectorWidget Model=@Model recipes=@recipes> </Craftly.Beer_Blazor.Shared.EditorWidgets.RecipeSelectorWidget>
                }
            }
            else
            {
                <Craftly.Beer_Blazor.Pages.Login refreshParent=@refresh> </Craftly.Beer_Blazor.Pages.Login>
            }


        }
    </div>

</div>
@code
{
    public string state = "";

    public static recipe Model = RecipeHelper.initializeBlankRecipe();
    public static List<recipe> recipes = new List<recipe>();

    public static bool isLoggedIn = false;

    protected override async Task OnInitializedAsync()
    {

    }

    protected override void OnAfterRender(bool firstRender)
    {
        //getSessionState();
        var session = state;
        if (session != null)
        {
            isLoggedIn = true;
            //recipes = await RecipeHelper.GetRecipes(session);
        }
    }

    public async void refresh()
    {
        state = await getSessionID();
        if (RecipeHelper.isLoggedIn(state))
        {
            recipes = await RecipeHelper.GetRecipes(state);
        }
        StateHasChanged();
    }

    async void saveSessionState(string session)
    {
        await ProtectedSessionStore.SetAsync("session", session);
    }

    ValueTask<string> getSessionID()
    {
        string session = "";
        return ProtectedSessionStore.GetAsync<string>("session");
    }

    //async void getSessionState()
    //{
    //    string session = null;
    //    try
    //    {
    //        state = await ProtectedSessionStore.GetAsync<string>("session");
    //        if(state != null)
    //        {
    //            isLoggedIn = true;
    //        }
    //        else
    //        {
    //            state = "";
    //            isLoggedIn = false;
    //        }
    //    }
    //    catch(Exception e)
    //    {

    //    }
    //}
}
