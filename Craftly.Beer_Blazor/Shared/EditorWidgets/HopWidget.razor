@using Beernet_Lib.Models;
@using Craftly.Beer_Blazor.ComponentClasses.EditorComponents;
@using Radzen;
@inherits HopEditor;


<div id="hopWidgetWrapper" class="grid grid-pad widgetItem recipeEditorWidget">
    <div class="col-1-2">
        <div id="hopListSelector" class="module selectorWidget">
            @if (Model.hops == null)
            {
                <p> loading...</p>
            }
            else
            {
                int i = 0;
                foreach (hopAddition ha in Model.hops)
                {
                    <div id="hop-@i" class="hopListItem grid @(i == hopState.currentSelectedHopIndex ? "hopListItemSelected" : "")" @onclick="(() => changeSelectedHop(ha.additionGuid))">
                        <div class="col-1-4">
                            <div>@ha.hop.name</div>
                            <div class="ingredientUnit">name</div>
                        </div>
                        <div class="col-1-4 ingredientUnitParent">
                            <div>@ha.hop.aau</div>
                            <div class="ingredientUnit">aau</div>
                        </div>
                        <div class="col-1-4 ingredientUnitParent">
                            <div>@ha.amount</div>
                            <div class="ingredientUnit">oz</div>
                        </div>
                        <div class="col-1-4 ingredientUnitParent">
                            <div>@ha.time</div>
                            <div class="ingredientUnit"> @(ha.type == "Dry Hop" ? "days" : "min")</div>
                        </div>
                    </div>
                    i++;
                }
            }
        </div>
    </div>
    <div class="col-1-2">
        <div class="module grid">
            <div class="col-1-2">
                <button type="button" @onclick="(() => AddHop())">Add Hop</button>
            </div>
            <div class="col-1-2">
                <button type="button" @onclick="(() => DeleteHop())">Delete Hop</button>
            </div>
        </div>
        <div class="module editorWidget">
            <h4 style="padding-top:0;">Edit Hop</h4>
            <div class="editorListItem infogrid">
                <div class="col-1-4">
                    <label>Hop: </label>
                </div>
                <div class="col-3-4">
                    <RadzenDropDown AllowClear="true" TValue="string"
                                    LoadData="@LoadData" AllowFiltering="true"
                                    Data="@HopList" TextProperty="name" Value="@hopState.currentSelectedHopID" Placeholder="@hopName" ValueProperty="idString" Style="width:100%;"
                                    Change="@(args => ChangeHop(args, "DropDown with custom filtering"))" />

                </div>
            </div>
            <div class="editorListItem infogrid">
                <div class="col-1-4">
                    <label>AAU: </label>
                </div>
                <div class="col-3-4">
                    @if (hopState.currentSelectedHopIndex != -1 && Model.hops.Count != 0 && Model.hops[hopState.currentSelectedHopIndex].hop != null)
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopAAU(args.Value.ToString(), "TextBox with change on every input"))" Value="@Model.hops[hopState.currentSelectedHopIndex].hop.aau.ToString()" />
                    }
                    else
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopAAU(args.Value.ToString(), "TextBox with change on every input"))" Value="" />
                    }
                </div>
            </div>
            <div class="editorListItem infogrid">
                <div class="col-1-4">
                    <label>Amount: </label>
                </div>
                <div class="col-3-4">
                    @if (hopState.currentSelectedHopIndex != -1 && Model.hops.Count != 0)
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopAmount(args.Value.ToString(), "TextBox with change on every input"))" Value="@Model.hops[hopState.currentSelectedHopIndex].amount.ToString()" />
                    }
                    else
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopAmount(args.Value.ToString(), "TextBox with change on every input"))" Value="" />
                    }
                </div>
            </div>
            <div class="editorListItem infogrid">
                <div class="col-1-4">
                    <label>Type: </label>
                </div>
                <div class="col-3-4">
                    <RadzenDropDown AllowClear="false"
                                    Style="width:100%;"
                                    TValue="string"
                                    FilterCaseSensitivity="FilterCaseSensitivity.CaseInsensitive"
                                    Placeholder="Select..."
                                    Data="@HopUses"
                                    Change="@(args => ChangeHopUse(args, "DropDown with placeholder"))"
                                    Value="@hopUse" />
                </div>
            </div>
            <div class="editorListItem infogrid">
                <div class="col-1-4">
                    <label>Time: </label>
                </div>
                <div class="col-3-4">
                    @if (hopState.currentSelectedHopIndex != -1 && Model.hops.Count != 0)
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopTime(args.Value.ToString(), "TextBox with change on every input"))" Value="@Model.hops[hopState.currentSelectedHopIndex].time.ToString()" />
                    }
                    else
                    {
                        <RadzenTextBox Style="width:100%;" @oninput="@(args => ChangeHopTime(args.Value.ToString(), "TextBox with change on every input"))" Value="" />
                    }
                </div>
            </div>
        </div>
    </div>
</div>
